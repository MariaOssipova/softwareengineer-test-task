// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoryWeightsServiceClient is the client API for CategoryWeightsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryWeightsServiceClient interface {
	GetScoresByCategoriesForPeriod(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Category, error)
	GetScoresByTicketsForPeriod(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Ticket, error)
	GetOverallScoreForPeriod(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Score, error)
	GetOverallScoreChangeForPeriodRange(ctx context.Context, in *PeriodRange, opts ...grpc.CallOption) (*Score, error)
}

type categoryWeightsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryWeightsServiceClient(cc grpc.ClientConnInterface) CategoryWeightsServiceClient {
	return &categoryWeightsServiceClient{cc}
}

func (c *categoryWeightsServiceClient) GetScoresByCategoriesForPeriod(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/CategoryWeightsService/GetScoresByCategoriesForPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryWeightsServiceClient) GetScoresByTicketsForPeriod(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/CategoryWeightsService/GetScoresByTicketsForPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryWeightsServiceClient) GetOverallScoreForPeriod(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/CategoryWeightsService/GetOverallScoreForPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryWeightsServiceClient) GetOverallScoreChangeForPeriodRange(ctx context.Context, in *PeriodRange, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/CategoryWeightsService/GetOverallScoreChangeForPeriodRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryWeightsServiceServer is the server API for CategoryWeightsService service.
// All implementations must embed UnimplementedCategoryWeightsServiceServer
// for forward compatibility
type CategoryWeightsServiceServer interface {
	GetScoresByCategoriesForPeriod(context.Context, *Period) (*Category, error)
	GetScoresByTicketsForPeriod(context.Context, *Period) (*Ticket, error)
	GetOverallScoreForPeriod(context.Context, *Period) (*Score, error)
	GetOverallScoreChangeForPeriodRange(context.Context, *PeriodRange) (*Score, error)
	mustEmbedUnimplementedCategoryWeightsServiceServer()
}

// UnimplementedCategoryWeightsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryWeightsServiceServer struct {
}

func (UnimplementedCategoryWeightsServiceServer) GetScoresByCategoriesForPeriod(context.Context, *Period) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByCategoriesForPeriod not implemented")
}
func (UnimplementedCategoryWeightsServiceServer) GetScoresByTicketsForPeriod(context.Context, *Period) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByTicketsForPeriod not implemented")
}
func (UnimplementedCategoryWeightsServiceServer) GetOverallScoreForPeriod(context.Context, *Period) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverallScoreForPeriod not implemented")
}
func (UnimplementedCategoryWeightsServiceServer) GetOverallScoreChangeForPeriodRange(context.Context, *PeriodRange) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverallScoreChangeForPeriodRange not implemented")
}
func (UnimplementedCategoryWeightsServiceServer) mustEmbedUnimplementedCategoryWeightsServiceServer() {
}

// UnsafeCategoryWeightsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryWeightsServiceServer will
// result in compilation errors.
type UnsafeCategoryWeightsServiceServer interface {
	mustEmbedUnimplementedCategoryWeightsServiceServer()
}

func RegisterCategoryWeightsServiceServer(s grpc.ServiceRegistrar, srv CategoryWeightsServiceServer) {
	s.RegisterService(&CategoryWeightsService_ServiceDesc, srv)
}

func _CategoryWeightsService_GetScoresByCategoriesForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Period)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryWeightsServiceServer).GetScoresByCategoriesForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CategoryWeightsService/GetScoresByCategoriesForPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryWeightsServiceServer).GetScoresByCategoriesForPeriod(ctx, req.(*Period))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryWeightsService_GetScoresByTicketsForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Period)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryWeightsServiceServer).GetScoresByTicketsForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CategoryWeightsService/GetScoresByTicketsForPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryWeightsServiceServer).GetScoresByTicketsForPeriod(ctx, req.(*Period))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryWeightsService_GetOverallScoreForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Period)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryWeightsServiceServer).GetOverallScoreForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CategoryWeightsService/GetOverallScoreForPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryWeightsServiceServer).GetOverallScoreForPeriod(ctx, req.(*Period))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryWeightsService_GetOverallScoreChangeForPeriodRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryWeightsServiceServer).GetOverallScoreChangeForPeriodRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CategoryWeightsService/GetOverallScoreChangeForPeriodRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryWeightsServiceServer).GetOverallScoreChangeForPeriodRange(ctx, req.(*PeriodRange))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryWeightsService_ServiceDesc is the grpc.ServiceDesc for CategoryWeightsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryWeightsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CategoryWeightsService",
	HandlerType: (*CategoryWeightsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScoresByCategoriesForPeriod",
			Handler:    _CategoryWeightsService_GetScoresByCategoriesForPeriod_Handler,
		},
		{
			MethodName: "GetScoresByTicketsForPeriod",
			Handler:    _CategoryWeightsService_GetScoresByTicketsForPeriod_Handler,
		},
		{
			MethodName: "GetOverallScoreForPeriod",
			Handler:    _CategoryWeightsService_GetOverallScoreForPeriod_Handler,
		},
		{
			MethodName: "GetOverallScoreChangeForPeriodRange",
			Handler:    _CategoryWeightsService_GetOverallScoreChangeForPeriodRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CategoryWeights.proto",
}
